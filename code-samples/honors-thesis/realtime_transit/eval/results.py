"""
results: Retrieve and sort information from results files generated by window_gnn training / testing loops.

Author: Nick Gable (gable105@umn.edu)
"""

import ast
import torch
from typing import List
from tqdm import tqdm
import os
import pandas as pd


def parse_file(file_name: str) -> dict:
    """
    Parse model output file. Returns a dictionary with the known arguments, plus 
    a key `loss` that is an array of loss values at each epoch, `val_loss` which is an
    array of validation loss values if it exists, and `mse` / `mae` which are the respective
    final MSE and MAE values.
    """
    with open(file_name, 'r') as f:
        result_output = {'loss': [], 'val_loss': []}
        for line in f:
            line = line.strip()
            if "Args for this training session" in line:
                # args line, load into output
                args = ast.literal_eval(line.split("session: ")[1])
                result_output.update(args)
            elif "Loss for epoch" in line:
                parsed_str = line.split(": ")[1]  # cut to right of colon

                if 'val_loss' in parsed_str:
                    train_loss, val_loss = tuple(
                        float(i) for i in parsed_str.split(", val_loss="))
                    result_output['loss'].append(train_loss)
                    result_output['val_loss'].append(val_loss)
                else:
                    result_output['loss'].append(float(parsed_str))
            elif "Average MSE for this model" in line:
                result_output['mse'] = float(line.split(": ")[1])
            elif "Average MAE for this model" in line:
                result_output['mae'] = float(line.split(": ")[1])

    return result_output


def results_table(files: List[str]) -> pd.DataFrame:
    """
    Process list of files `files`, and return a DataFrame with those results in tabular format. Also, if available,
    adds column `model_desc` containing string representation of model object.

    Note: Pass in a list of text result files - function automatically changes extension to `.pt` to try to find a matching model.
    """
    results = []

    for file in tqdm(files, desc="Parsing model output files"):
        file_results = parse_file(file)
        file_results['file_name'] = os.path.splitext(os.path.basename(file))[0]
        try:
            model = torch.load(file.replace(".txt", ".pt"),
                               map_location=torch.device('cpu'))
            file_results['model_desc'] = str(model)
        except FileNotFoundError:
            pass

        results.append(file_results)

    return pd.DataFrame(results)
